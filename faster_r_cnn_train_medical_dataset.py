# -*- coding: utf-8 -*-
"""Faster R-CNN_train_medical_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NaMd-qClIv6GmrJqjxw_j_fQy-aVF0Sy
"""

# For mouting
from google.colab import drive
import torch
import os
import json

drive.mount('/content/drive/', force_remount=True)

# import os
# import torch
# import torch.utils.data
# import torchvision
# from PIL import Image
# from pycocotools.coco import COCO

# class myOwnDataset(torch.utils.data.Dataset):
#     def __init__(self, root, annotation, transforms=None):
#         self.root = root
#         self.transforms = transforms
#         self.coco = COCO(annotation)
#         self.ids = list(sorted(self.coco.imgs.keys()))

#     def __getitem__(self, index):
#         # Own coco file
#         coco = self.coco
#         # Image ID
#         img_id = self.ids[index]
#         # List: get annotation id from coco
#         #ann_ids = coco.getAnnIds(imgIds=img_id)
#         ann_ids = coco.getAnnIds(imgIds=img_id)
#         # Dictionary: target coco_annotation file for an image
#         coco_annotation = coco.loadAnns(ann_ids)
#         # path for input image
#         path = coco.loadImgs(img_id)[0]['file_name']
#         # open the input image
#         img = Image.open(os.path.join(self.root, path))

#         # number of objects in the image
#         num_objs = len(coco_annotation)

#         # Bounding boxes for objects
#         # In coco format, bbox = [xmin, ymin, width, height]
#         # In pytorch, the input should be [xmin, ymin, xmax, ymax]
#         boxes = []
#         for i in range(num_objs):
#             xmin = coco_annotation[i]['bbox'][0]
#             ymin = coco_annotation[i]['bbox'][1]
#             xmax = xmin + coco_annotation[i]['bbox'][2]
#             ymax = ymin + coco_annotation[i]['bbox'][3]
#             boxes.append([xmin, ymin, xmax, ymax])
#         boxes = torch.as_tensor(boxes, dtype=torch.float32)
#         # Labels (In my case, I only one class: target class or background)
#         labels = torch.ones((num_objs,), dtype=torch.int64)
#         # Tensorise img_id
#         img_id = torch.tensor([img_id])
#         # Size of bbox (Rectangular)
#         areas = []
#         for i in range(num_objs):
#             areas.append(coco_annotation[i]['area'])
#         areas = torch.as_tensor(areas, dtype=torch.float32)
#         # Iscrowd
#         iscrowd = torch.zeros((num_objs,), dtype=torch.int64)

#         # Annotation is in dictionary format
#         my_annotation = {}
#         my_annotation["boxes"] = boxes
#         my_annotation["labels"] = labels
#         my_annotation["image_id"] = img_id
#         my_annotation["area"] = areas
#         my_annotation["iscrowd"] = iscrowd

#         if self.transforms is not None:
#             img = self.transforms(img)

#         return img, my_annotation, boxes, img_id, coco_annotation

#     def __len__(self):
#         return len(self.ids)

import os
import torch
import torch.utils.data
import torchvision
from PIL import Image
from pycocotools.coco import COCO


class myOwnDataset(torch.utils.data.Dataset):
    def __init__(self, root, annotation, transforms=None):
        self.root = root
        self.transforms = transforms
        self.coco = COCO(annotation)
        self.ids = list(sorted(self.coco.imgs.keys()))

    def __getitem__(self, index):
        # Own coco file
        coco = self.coco
        # Image ID
        img_id = self.ids[index-1]
        # List: get annotation id from coco
        #ann_ids = coco.getAnnIds(imgIds=img_id)
        # Dictionary: target coco_annotation file for an image
        coco_annotation = coco.imgToAnns[img_id]
        # path for input image
        path = coco.loadImgs(img_id)[0]['file_name']
        # open the input image
        img = Image.open(os.path.join(self.root, path))

        # number of objects in the image
        num_objs = len(coco_annotation)

        # Bounding boxes for objects
        # In coco format, bbox = [xmin, ymin, width, height]
        # In pytorch, the input should be [xmin, ymin, xmax, ymax]
        boxes = []
        for i in range(num_objs):
            xmin = coco_annotation[i]['bbox'][0]
            ymin = coco_annotation[i]['bbox'][1]
            xmax = xmin + coco_annotation[i]['bbox'][2]
            ymax = ymin + coco_annotation[i]['bbox'][3]
            boxes.append([xmin, ymin, xmax, ymax])
        print('image_id:',img_id,boxes)
        boxes = torch.as_tensor(boxes, dtype=torch.float32)
        # Labels (In my case, I only one class: target class or background)
        labels = torch.ones((num_objs,), dtype=torch.int64)
        # Tensorise img_id
        img_id = torch.tensor([img_id])
        # Size of bbox (Rectangular)
        areas = []
        for i in range(num_objs):
            areas.append(coco_annotation[i]['area'])
        areas = torch.as_tensor(areas, dtype=torch.float32)
        # Iscrowd
        iscrowd = torch.zeros((num_objs,), dtype=torch.int64)

        # Annotation is in dictionary format
        my_annotation = {}
        my_annotation["boxes"] = boxes
        my_annotation["labels"] = labels
        my_annotation["image_id"] = img_id
        my_annotation["area"] = areas
        my_annotation["iscrowd"] = iscrowd

        if self.transforms is not None:
            img = self.transforms(img)

        return img, my_annotation

    def __len__(self):
        return len(self.ids)

# In my case, just added ToTensor
def get_transform():
    custom_transforms = []
    custom_transforms.append(torchvision.transforms.ToTensor())
    return torchvision.transforms.Compose(custom_transforms)

# create own Dataset
my_dataset = myOwnDataset(root='/content/drive/MyDrive/BSc_Project/Train_700/images',
                          annotation='/content/drive/MyDrive/BSc_Project/Kvasir-SEG/annotation/Train_700.json',
                          transforms=get_transform()
                          )

my_dataset_val = myOwnDataset(root='/content/drive/MyDrive/BSc_Project/Val_300/images',annotation='/content/drive/MyDrive/BSc_Project/Kvasir-SEG/annotation/Val_300.json',transforms=get_transform())

import torchvision.transforms as transforms
from PIL import Image
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

'''
img, my_annotation, boxes_60 = my_dataset[650]

# Convert tensor to PIL Image
image_pil = transforms.ToPILImage()(img)
# Create figure and axes
fig, ax = plt.subplots(1)

# Display the image
ax.imshow(image_pil)

# Add bounding boxes to the image
x_min, y_min, x_max, y_max = boxes_60[0]
print(boxes_60[0])
width = x_max - x_min
height = y_max - y_min
rect = Rectangle((x_min, y_min), width, height, fill=False, edgecolor='red')
ax.add_patch(rect)

# Show the image with bounding boxes
plt.show()
'''

import json
with open('/content/drive/MyDrive/BSc_Project/Kvasir-SEG/annotation/Train_700.json','r') as f:
  coco_json = json.load(f)

print(coco_json['annotations'][0])
print(coco_json['annotations'][699])

def collate_fn(batch):
    return tuple(zip(*batch))

# Batch size
train_batch_size = 8

data_loader = torch.utils.data.DataLoader(my_dataset,
                                          batch_size=train_batch_size,
                                          shuffle=True,
                                          num_workers=4,
                                          collate_fn=collate_fn)

val_loader = torch.utils.data.DataLoader(my_dataset_val,
                                          batch_size=train_batch_size,
                                          shuffle=True,
                                          num_workers=4,
                                          collate_fn=collate_fn)

# select device (whether GPU or CPU)
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

# DataLoader is iterable over Dataset
for imgs, annotations in data_loader:
    imgs = list(img.to(device) for img in imgs)
    annotations = [{k: v.to(device) for k, v in t.items()} for t in annotations]
    print(annotations)

# select device (whether GPU or CPU)
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

# DataLoader is iterable over Dataset
for imgs, annotations in val_loader:
    imgs = list(img.to(device) for img in imgs)
    annotations = [{k: v.to(device) for k, v in t.items()} for t in annotations]
    print(annotations)

# Run the model on GPU if it is available
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Load a pre-trained Faster R-CNN model
model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
model.to(device)
_ = model.eval()

print("Model ready")

# Download TorchVision repo to use some files from
# references/detection
!pip install pycocotools --quiet
!git clone https://github.com/pytorch/vision.git
!git checkout v0.3.0

!cp vision/references/detection/utils.py ./
!cp vision/references/detection/transforms.py ./
!cp vision/references/detection/coco_eval.py ./
!cp vision/references/detection/engine.py ./
!cp vision/references/detection/coco_utils.py ./

'''# # to train on gpu if selected.
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

num_classes = 1

# get the model using our helper function
model = get_object_detection_model(num_classes)

# move model to the right device
model.to(device)
'''
# construct an optimizer
params = [p for p in model.parameters() if p.requires_grad]
optimizer = torch.optim.SGD(params, lr=0.005,
                            momentum=0.9, weight_decay=0.0005)

# and a learning rate scheduler which decreases the learning rate by
# 10x every 3 epochs
lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,
                                               step_size=3,
                                               gamma=0.1)

# Basic python and ML Libraries
import os
import random
import numpy as np
import pandas as pd
# for ignoring warnings
import warnings
warnings.filterwarnings('ignore')

# We will be reading images using OpenCV
import cv2

# xml library for parsing xml files
from xml.etree import ElementTree as et

# matplotlib for visualization
import matplotlib.pyplot as plt
import matplotlib.patches as patches

# torchvision libraries
import torch
import torchvision
from torchvision import transforms as torchtrans
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor

# these are the helper libraries imported.
from engine import train_one_epoch, evaluate
import utils
import transforms as T

# for image augmentations
import albumentations as A
from albumentations.pytorch.transforms import ToTensorV2

# training for 10 epochs
num_epochs = 20

for epoch in range(num_epochs):
    # training for one epoch
    train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq=10)
    # update the learning rate
    lr_scheduler.step()
    # evaluate on the test dataset
    evaluate(model, val_loader, device=device)

torch.save(model.state_dict(), 'drive/MyDrive/BSc_Project/medical_faster_rcnn_weight_test.pth')

# Save the model instance
save_path = "drive/MyDrive/BSc_Project/Code/Models_Medical/medical_faster_rcnn_test"
torch.save(model, save_path)

model.load_state_dict(torch.load('drive/MyDrive/BSc_Project/medical_faster_rcnn_weight_test.pth'))
model.eval()

'''# optimizeer and others
params = [p for p in model.parameters() if p.requires_grad]
optimizer = optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)
lr_scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1)
criterion = nn.SmoothL1Loss()

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
len_dataloader = len(data_loader)

## train model
model.train()
num_epochs = 100
best_acc = 0.0
best_epoch = 0
for epoch in range(num_epochs):
    for i, (imgs, annotations) in enumerate(data_loader):
        i += 1
        imgs = list(img.to(device) for img in imgs)
        annotations = [{k: v.to(device) for k, v in t.items()} for t in annotations]
        loss_dict = model(imgs, annotations)
        losses = sum(loss for loss in loss_dict.values())

        optimizer.zero_grad()
        losses.backward()
        optimizer.step()
        print(f'Epoch [{epoch+1}/{num_epochs}], Iteration: {i}/{len_dataloader}, Loss: {losses}')
    evaluate(model, val_loader, device=device)

'''